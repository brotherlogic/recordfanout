// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordFanoutServiceClient is the client API for RecordFanoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordFanoutServiceClient interface {
	Fanout(ctx context.Context, in *FanoutRequest, opts ...grpc.CallOption) (*FanoutResponse, error)
}

type recordFanoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordFanoutServiceClient(cc grpc.ClientConnInterface) RecordFanoutServiceClient {
	return &recordFanoutServiceClient{cc}
}

func (c *recordFanoutServiceClient) Fanout(ctx context.Context, in *FanoutRequest, opts ...grpc.CallOption) (*FanoutResponse, error) {
	out := new(FanoutResponse)
	err := c.cc.Invoke(ctx, "/recordfanout.RecordFanoutService/Fanout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordFanoutServiceServer is the server API for RecordFanoutService service.
// All implementations should embed UnimplementedRecordFanoutServiceServer
// for forward compatibility
type RecordFanoutServiceServer interface {
	Fanout(context.Context, *FanoutRequest) (*FanoutResponse, error)
}

// UnimplementedRecordFanoutServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordFanoutServiceServer struct {
}

func (UnimplementedRecordFanoutServiceServer) Fanout(context.Context, *FanoutRequest) (*FanoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fanout not implemented")
}

// UnsafeRecordFanoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordFanoutServiceServer will
// result in compilation errors.
type UnsafeRecordFanoutServiceServer interface {
	mustEmbedUnimplementedRecordFanoutServiceServer()
}

func RegisterRecordFanoutServiceServer(s grpc.ServiceRegistrar, srv RecordFanoutServiceServer) {
	s.RegisterService(&RecordFanoutService_ServiceDesc, srv)
}

func _RecordFanoutService_Fanout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordFanoutServiceServer).Fanout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordfanout.RecordFanoutService/Fanout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordFanoutServiceServer).Fanout(ctx, req.(*FanoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordFanoutService_ServiceDesc is the grpc.ServiceDesc for RecordFanoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordFanoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordfanout.RecordFanoutService",
	HandlerType: (*RecordFanoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fanout",
			Handler:    _RecordFanoutService_Fanout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordfanout.proto",
}
